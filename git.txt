* 버전관리시스템 ( VCS ) - 형상 관리 시스템
-개발 단계의 특징적 순간 순간을 스냅샷으로 기록하여
 언제든 버전 사이를 자유롭게 오갈 수 있는 솔루션

- 팀원 간 코드 공유 및 충돌 관리를 지원하여 협업에 유리

-과거 버전 관리 시스템들
CVS ( Concurrent Version System )
SVN ( SubVersioN )

- 현제는 깃과 깃허브를 사용하는 추새(무료라)
*GIT ( DVCS : Distributed (분산된) 형상 관리 시스템 )
- GITSCM(콘솔프로그램/ 제일 깃에 동작 원리 방식으로 돌아감) / Source Tree(국내) / Git Kraken(글로벌) 


* git 관련 cmd 명령어
1) git init : 명령을 내린 폴더에 대해 git의 추적을 시작하는 명령
- .git 숨김 저장소를 생성하고 버전 데이터를 관리하기 시작

2) git status : 현재 폴더에 대해 git이 보여주는 현재 상태를 확인
On branch master> 현재위치는 브랜치 마스터에 있다

No commits yet >현재 커밋된게(저장된게) 없다

nothing to commit (create/copy files and use "git add" to track)
>현재 있는게없어서 커밋할것도 없다~ 라는뜻
-------------------------------------------------------------------------------
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        test01.txt
>현재 깃에 의해서 감지된 파일인 test텍스트파일이 있다
nothing added to commit but untracked files present (use "git add" to track)
---------------------------------------------------------------------------------
On branch master
nothing to commit, working tree clean
가장최근에 커밋한 이후로 워킹트리에 바뀐게없어용 이란뜻이래



3) git add 원하는파일이름 : 스테이지에 파일 add하는 명령 (git add * : 파일전체선택)
C:\gitpractice>git status  >하고나서 다시한번 git status를 쓰면 
On branch master

No commits yet

Changes to be committed: >스테이지에 new file로 내가 설정한 파일이 들어감
  (use "git rm --cached <file>..." to unstage)
        new file:   test01.txt

4) git rm --cached 파일이름 : 스테이지에서 선택파일 삭제
                                     (파일에서 완전삭제가아닌 스테이지에서 삭제) 
rm 'test01.txt' > 삭제되었다는 확인

5) git log : 커밋된 정보를 불러오는 명령어
fatal: your current branch 'master' does not have any commits yet > 커밋된게읎어요~

commit 9eced4e8d07e58284898fb3c5f4e90e78edcf27f (HEAD -> master)
Author: Carrythefuture <146246027+Carrythefuture@users.noreply.github.com>
Date:   Fri Aug 22 10:31:30 2025 +0900

    test01.txt created
> 이거 작성한사람은 Carrythefuture 이고 이메일은 <이안에있는거>이며
commit : 의 고유아이디값 (워킹트리가 현제 마스터파일을 가르키고있음 이란뜻)

git log -2: 최신거 2개 만 로그로 출력


6) git commit -m : -m : 코멘트(파일에대한 정보를 간단하게 작성하는 명령)
   git commit : 길게 파일에대한 코멘트를 작성

처음에 하면 오류가뜰거임 너가 누군지 나는 모르겠으니 저장하기에 불안하지않겠냐 식으로~ 그럴땐 밑에 명령어로 내가 누군지 작성해주면 커밋이될거다~


git config user.email (e메일작성)
git config user.name (이름작성)

C:\gitpractice>git commit -m "test01.txt created"
[master (root-commit) 9eced4e] test01.txt created
 1 file changed, 1 insertion(+)
 create mode 100644 test01.txt

이렇게하면 작성됐다는 이야기


7) git checkout (고유id) : 현제 해더가 가르키는 위치 체인지 > 과거 체크포인트로 체인지

C:\gitpractice>git status
HEAD detached at 5df10a6
nothing to commit, working tree clean

C:\gitpractice>git log
commit 5df10a674d5ba18273f3a4ee3d4048a13228dd7b (HEAD)
Author: Carrythefuture <146246027+Carrythefuture@users.noreply.github.com>
Date:   Fri Aug 22 10:44:14 2025 +0900

    test02.txt created

commit 9eced4e8d07e58284898fb3c5f4e90e78edcf27f
Author: Carrythefuture <146246027+Carrythefuture@users.noreply.github.com>
Date:   Fri Aug 22 10:31:30 2025 +0900

    test01.txt created

이렇게 과거 test03을 만들기전으로 돌아가게됨

git checkout master : 마스터스테이스(가장최근에만들어진파일) 로 이동


파일을 폴더에서 삭제후 )))
  (use "git add/rm <file>..." to update what will be committed)>지운 파일을 그대로 지운상태로 커밋할려면 이걸쓰고~
  (use "git restore <file>..." to discard changes in working directory)>지운파일을 지운상태로 커밋하지않고 복구하겟니? 라는뜻


8) git reset --hard (id값) : 미래를 아예 완전히 삭제 후 원하는 id값인 과거로 이동
쓰면 안되는 기술이긴하데 ㅇㅇ(협업중 다른사람이 하고있는 내용도 삭제할수있음)

9) git branch : 내가 가지고있는 가지수(브랜치 종류)

10) git branch -D 브랜치이름 : 어떠한 방해에도 브랜치를 삭제하겟다
실험적인걸 못쓰는경우면 그냥 가지치기로 지우는 명령어라고 생각하면됨

11) git merge 브랜치이름 : 현재 내 브랜치에 적은 브랜치에있는 내용을 합치겠따
이건 복붙한거라 병합한 브랜치내용도 그대로 남아있음

* Conflict 충돌하다 : 합업중 여러사람이 손보다가 커밋할려할때 버전이 충돌할때 merege실패 후 오류가뜸 ㅇㅇ..

머지중
파란글자 뜨면 a눌러서 안에 메모적고 esc눌러서 밑에 명령 완료하면끝남
:w 엔터 >저장
:q 엔터>나가기(완료)


12)git stash -u : 작업중인 워킹트리에있는 자료들이 stash로 이동해 저장됨(임시)
git stash pop : stash 로 임시저장해둔 데이터들을 다시 복구

*GITHUB














