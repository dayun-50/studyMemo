* 폴더구조 분리 및 상태 관리 연습 (props)

--------------------------------------------------------

* module 스타일링 - 로컬 스코핑
 - styled-component 
동적뭐시기뭐시깽이용이래

 - tailwind.css 
인라인으로 스타일링하는 라이브러리래

> 반응형 웹용 라이브러리 별도
 - reactstrap
 - mui

--------------------------------------------------------

* 페이지 전환 (react-router-dom)

================================

* 정리문제
1)
인덱스는 목록 아이디 네임 연락처
 목록/ 데이터편집(사이드바)
데이터편집 > 위에 입력 수정 삭제 버튼 

2)
영화 관리 시스템 (좌측 메뉴항목선택)
왼쪽 사이드바 / 홈/ 직원정보 /영화 정보/ 메뉴정보
각 메뉴별 목 입 수 삭 버튼 및 기능

===========================================

*context API < 리액트 라이브러리에 그냥 깔려있으시데요
상태변수를 전역저장소에서 컴포먼튼가뭔가가 직접 그 데이터를
가져오는 방식으로 바꿔줌

현재쓰는 방식이 틀린건아닌데 대규모로 무언가할때 불필요한 페이지 리롤과 데이터 리롤이 많아져서 저API를 쓴다고한다~

약식이래 기본이라 ㅇㅇ

---------------------------------------------------------------------------------

Redux < context 에비해 화려하고 좋지만
보일러플레이트? 뭐야 암튼 그거랑 사용법이 어렵다

대형프로젝트에서 많이 사용

--------------------------------------------------------------------------------

Zustand 
많이들 사용하는 라이브러리
보일러플레이트없도록 싹지우고 어쩌고 경량이래 뭔소린진 모르겠고 좋다나봐

소,중 프로젝트에서 많이 사용

---------------------------------------------------------------------------------

flux

view ->(액션) ->(뭐있던거같은데)-> redux
뷰에서 데이터관리를 리덕스가 하는 그런 흐름 구조래
(서버로따지면  DAO 같은 개념이라는데 흠흠)

----------------------------------------------------------------------------------

* React 에서 사용되는 저장소 라이브러리
 - Context API : 내장 라이브러리 ( 가장 경량이고 기능도 적음)
 - Redux : 기능도 많고 진입장벽도 높음 ( 보일러플레이트 비난 많음)
 - Zustand : Redux 대비 기능은 적지만 쉽고 보일러플레이트 없음

>React + Redux = flux 아키텍처
>React + Zustand = 경량 flux  
>React + (페이스북 자체라이브러리) Recoil
라고 부른단다~























